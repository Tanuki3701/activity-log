name: CI Dev Deployment (CI 開發部署)
     on:
       push:
         branches: [ master ]  # 使用 master 分支
       pull_request:
         branches: [ master ]  # 添加 PR 事件觸發
     jobs:
       build:
         runs-on: ubuntu-latest
         steps:
           - name: Checkout code (結帳代碼)
             uses: actions/checkout@v4
           - name: Simulate build (模擬建置)
             run: |
               echo "Generating build artifact"
               zip -r build.zip . -x "*.git*"
           - name: Upload artifact (上傳構件)
             uses: actions/upload-artifact@v4
             with:
               name: build-artifact
               path: build.zip
       test-unit:
         runs-on: ubuntu-latest
         needs: build
         steps:
           - name: Checkout code (結帳代碼)
             uses: actions/checkout@v4
           - name: Run Unit Tests (執行單元測試)
             run: |
               chmod +x test-script.sh
               echo "Running mock unit tests..."
               ./test-script.sh || exit 1
       test-integration:
         runs-on: ubuntu-latest
         needs: test-unit
         steps:
           - name: Checkout code (結帳代碼)
             uses: actions/checkout@v4
           - name: Run Integration Tests (執行整合測試)
             run: |
               chmod +x test-script.sh
               echo "Running mock integration tests..."
               ./test-script.sh || exit 1
       deploy-staging:
         runs-on: ubuntu-latest
         needs: test-integration
         environment: staging
         env:
           TEST_ENV: staging
         steps:
           - name: Checkout code (結帳代碼)
             uses: actions/checkout@v4
           - name: Download artifact (下載構件)
             uses: actions/download-artifact@v4
             with:
               name: build-artifact
               path: ./release-artifacts
           - name: Create staging release (創建 staging 發布)
             env:
               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
               BASE_TAG: ${{ vars.BUILD_TAG }}-${{ env.TEST_ENV }}
               NOTE: ${{ vars.RELEASE_NOTE }}
             run: |
               cd ./release-artifacts
               if [ -f build.zip ]; then
                 TAG="${BASE_TAG}-$(date +%s)"
                 echo "Found build.zip, creating pre-release with TAG=$TAG and NOTE=$NOTE for TEST_ENV=$TEST_ENV"
                 gh release create "$TAG" ./build.zip --notes "$NOTE" --prerelease || { echo "Release creation failed: $?"; exit 1; }
               else
                 echo "No build.zip found, skipping release"
                 ls -la
                 exit 1
               fi
       deploy-production:
         runs-on: ubuntu-latest
         needs: deploy-staging
         environment: production
         env:
           TEST_ENV: prod
         steps:
           - name: Checkout code (結帳代碼)
             uses: actions/checkout@v4
           - name: Download artifact (下載構件)
             uses: actions/download-artifact@v4
             with:
               name: build-artifact
               path: ./release-artifacts
           - name: Create production release (創建 production 發布)
             env:
               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
               BASE_TAG: ${{ vars.BUILD_TAG }}-${{ env.TEST_ENV }}
               NOTE: ${{ vars.RELEASE_NOTE }}
             run: |
               cd ./release-artifacts
               if [ -f build.zip ]; then
                 TAG="${BASE_TAG}-$(date +%s)"
                 echo "Found build.zip, creating release with TAG=$TAG and NOTE=$NOTE for TEST_ENV=$TEST_ENV"
                 gh release create "$TAG" ./build.zip --notes "$NOTE" || { echo "Release creation failed: $?"; exit 1; }
               else
                 echo "No build.zip found, skipping release"
                 ls -la
                 exit 1
               fi
